name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.13"]

    env:
      CI: true
      GITHUB_ACTIONS: true

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        uv sync --group dev

    - name: Create .env file
      run: |
        cp .env.example .env
        echo "SECRET_KEY=test-secret-key-for-ci" >> .env
        echo "DEBUG=false" >> .env
        echo "CI=true" >> .env
        echo "GITHUB_ACTIONS=true" >> .env
        echo "DATABASE_URL=postgres://postgres:postgres@localhost:5432/test_db" >> .env

    - name: Run Django system checks
      run: |
        uv run python manage.py check

    - name: Run migrations
      run: |
        uv run python manage.py migrate

    - name: Collect static files
      run: |
        uv run python manage.py collectstatic --noinput

    - name: Run code formatting check
      run: |
        uv run black --check .
        uv run isort --check-only .

    - name: Run linting
      run: |
        uv run flake8 .

    - name: Run type checking
      run: |
        uv run mypy .

    - name: Run tests with coverage
      run: |
        uv run pytest --cov=app --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  docker:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t django-app:latest .

    - name: Test Docker image
      run: |
        docker run --rm -d -p 8000:8000 --name test-container django-app:latest
        sleep 10
        curl -f http://localhost:8000 || exit 1
        docker stop test-container
